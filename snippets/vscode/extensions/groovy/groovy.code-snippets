{
  "replace(dir: \u2026, includes: \u2026, token: \u2026, value: \u2026)": {
    "prefix": "replace",
    "body": "replace(dir:\"${1:dirName}\", includes:\"${2:*.*}\", token:\"${3:tokenName}\", value:\"\\${${4:value}}\")$0",
    "description": "Replace(...)"
  },
  "Doc Block": {
    "prefix": "doc",
    "body": [
      "/**",
      " * $0",
      " */"
    ],
    "description": "Doc block comment"
  },
  "key: \"value\" (Hash Pair)": {
    "prefix": "key",
    "body": "${1:key}: ${2:\"${3:value}\"}"
  },
  "Thread.start { \u2026 }": {
    "prefix": "thread",
    "body": [
      "Thread.start {",
      "\t$0",
      "}"
    ],
    "description": "Thread.start { ... }"
  },
  "Thread.startDaemon { \u2026 }": {
    "prefix": "thread",
    "body": [
      "Thread.startDaemon {",
      "\t$0",
      "}"
    ],
    "description": "Thread.startDaemon { ... }"
  },
  "case \u2026 break": {
    "prefix": "case",
    "body": [
      "case ${1:CASE_NAME}:",
      "\t$2",
      "break$0"
    ],
    "description": "case ... break"
  },
  "instance \u2026 (Singleton)": {
    "prefix": "instance",
    "body": [
      "private static $1 instance",
      "",
      "static $1 getInstance(${2:args}) { ",
      "\tif (!instance) instance = new $1(${2:args})",
      "\treturn instance",
      "}"
    ],
    "description": "Singleton instance + Getter"
  },
  "class \u2026 extends GroovyTestCase { \u2026 }": {
    "prefix": "tc",
    "body": [
      "class $1 extends GroovyTestCase {",
      "",
      "\t$0",
      "}"
    ],
    "description": "GroovyTestCase class"
  },
  "copy(file: \u2026, tofile: \u2026) ": {
    "prefix": "copy",
    "body": "copy(file:\"${1:sourceFile}\", tofile:\"${2:targetFile}\")",
    "description": "Copy file"
  },
  "copy(todir: \u2026) { fileset(dir: \u2026) { include \u2026 exclude }": {
    "prefix": "copy",
    "body": [
      "copy(todir:\"${1:targetDir}\") {",
      "\tfileset(dir:\"${2:sourceDir}\") {",
      "\t\tinclude(name:\"${3:includeName}\")",
      "\t\texclude(name:\"${4:excludeName}\")",
      "\t}",
      "}"
    ],
    "description": "Copy fileset todir w/ include/exclude"
  },
  "copy(todir: \u2026) { fileset:dir \u2026) }": {
    "prefix": "copy",
    "body": [
      "copy(todir:\"${1:targetDir}\") {",
      "\tfileset(dir:\"${2:sourceDir}\")",
      "}"
    ],
    "description": "Copy fileset todir"
  },
  "closure = { \u2026 } ": {
    "prefix": "cv",
    "body": [
      "def ${1:closureName} = { ${2:args} ->",
      "\t$0",
      "}"
    ],
    "description": "Closure block"
  },
  "for(\u2026 in \u2026) { \u2026 }": {
    "prefix": "forin",
    "body": [
      "for (${1:element} in ${2:collection}) {",
      "\t$0",
      "}"
    ],
    "description": "For-loop"
  },
  "mkdir(dir: \u2026)": {
    "prefix": "mkdir",
    "body": "mkdir(dir:\"${1:dirName}\")",
    "description": "mkdir"
  },
  "print": {
    "prefix": "p",
    "body": "print $0",
    "description": "print"
  },
  "println ": {
    "prefix": "pl",
    "body": "println $0",
    "description": "println"
  },
  "runAfter() { \u2026 }": {
    "prefix": "runa",
    "body": [
      "runAfter(${1:delay}) {",
      "\t$0",
      "}"
    ],
    "description": "runAfter()  { ... }"
  },
  "setUp() { \u2026 }": {
    "prefix": "setup",
    "body": [
      "void setUp() {",
      "\t$0",
      "}"
    ],
    "description": "setup() { ... }"
  },
  "sleep(secs) { \u2026 // on interrupt do }": {
    "prefix": "sleep",
    "body": [
      "sleep(${1:secs}) {",
      "\t${2:// on interrupt do}",
      "}"
    ],
    "description": "sleep with interrupt"
  },
  "sleep(secs)": {
    "prefix": "sleep",
    "body": "sleep(${1:secs})",
    "description": "sleep"
  },
  "sort { \u2026 }": {
    "prefix": "sort",
    "body": [
      "sort { ",
      "\t$0",
      "}"
    ],
    "description": "sort"
  },
  "static main() { \u2026 }": {
    "prefix": "main",
    "body": [
      "static main(args) {",
      "\t$0",
      "}"
    ],
    "description": "main method"
  },
  "switch \u2026 case": {
    "prefix": "switch",
    "body": [
      "switch(${1:value}) {",
      "\tcase ${2:CASE}:",
      "\t\t$3",
      "\tbreak$0",
      "}"
    ],
    "description": "Switch-Case block"
  },
  "switch \u2026 case \u2026 default": {
    "prefix": "switch",
    "body": [
      "switch(${1:value}) {",
      "\tcase ${3:CASE}:",
      "\t\t$4",
      "\tbreak$0",
      "\tdefault:",
      "\t\t$2",
      "\tbreak",
      "}"
    ],
    "description": "Switch-Case-Default block"
  },
  "tearDown() { \u2026 }": {
    "prefix": "tear",
    "body": [
      "void tearDown() {",
      "\t$0",
      "}"
    ],
    "description": "tearDown() { ... }"
  },
  "test()": {
    "prefix": "t",
    "body": [
      "void test$1() {",
      "\t$0",
      "}"
    ],
    "description": "test method"
  },
  "var": {
    "prefix": "v",
    "body": "${1:def} ${2:var}${3: = ${0:null}}",
    "description": "var"
  }
}